package light;

import geometry.GeometricObject;
import geometry.Intersection;
import utility.Color;
import utility.Origin;
import utility.Ray;

public class LightObject
{
	public Origin	ori;
	public Color	c;
	public float	i;
	
	public LightObject()
	{
		this.ori = null;
		this.c = null;
		this.i = 0.0f;
	}
	
	public LightObject(Origin ori, Color c, float i)
	{
		this.ori = ori;
		this.c = c;
		this.i = i;
	}
	
	public boolean isShadow()
	{
		return (true);
	}
	
	public Color setAmbientLight(GeometricObject obj)
	{
		return (obj.ambient);
	}
	
	public Color addSpecularLight(Intersection inter, Ray ray, Color c)
	{
		return (c);
	}
	
	public Color addDiffuseLight(Intersection inter, double lightIntensity, Color c)
	{
		Color tmp = new Color(inter.obj.diffuse);
		c.mul(lightIntensity);
		return (c);
	}
	
	public Color Process(LightObject[] LightArr, Intersection inter, Ray ray)
	{
		Color c;
		
		c = setAmbientLight(inter.obj);
		for (int i = 0; i < LightArr.length; i++)
		{
			/* if (lightvector + inter with lightvector) */
			if (isShadow() == false)
			{
				/* diffuse process */
				c = addDiffuseLight(inter, LightArr[i].i, c);
			}
			/* specular process */
			c = addSpecularLight(inter, ray, c);
		}
		return (c);
	}
}
